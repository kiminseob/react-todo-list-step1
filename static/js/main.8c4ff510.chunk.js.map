{"version":3,"sources":["constants.js","components/TodoTypingView.jsx","components/TodoItemView.jsx","components/TodoListView.jsx","components/TodoFilterView.jsx","stores/LocalStore.js","stores/TodoStore.js","stores/RootStore.js","components/TodoApp.jsx","App.js","index.js"],"names":["eventkey","selectState","localStoreKey","TodoTypingView","observer","todoStore","useContext","TodoListContext","todo","useLocalObservable","title","typing","e","this","target","value","initTitle","id","className","placeholder","onChange","onKeyPress","key","trim","length","addTodo","autoFocus","TodoItemView","listEle","useRef","editedTodo","isEdited","toggle","current","completed","ref","onDoubleClick","type","changeComplete","checked","onClick","removeTodo","onKeyUp","changeTitle","TodoListView","selectedTodos","map","TodoFilterView","ALL","ACTIVE","COMPLETED","selected","changeSelected","localStore","JSON","parse","localStorage","getItem","item","setItem","stringify","todos","makeObservable","observable","action","editTodo","computed","push","Date","now","filter","_todo","autorun","RootStore","createContext","TodoApp","Provider","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c4ff510.chunk.js","sourcesContent":["const eventkey = {\n  ENTER: \"Enter\",\n  ESC: \"Esc\",\n  ESCAPE: \"Escape\",\n};\n\nconst selectState = {\n  ALL: \"all\",\n  ACTIVE: \"active\",\n  COMPLETED: \"completed\",\n};\n\nconst localStoreKey = \"todoList\";\n\nexport { eventkey, selectState, localStoreKey };\n","import { observer, useLocalObservable } from \"mobx-react-lite\";\nimport { useContext } from \"react\";\nimport { TodoListContext } from \"./TodoApp\";\nimport { eventkey } from \"../constants\";\n\nconst TodoTypingView = observer(() => {\n  const { todoStore } = useContext(TodoListContext);\n\n  const todo = useLocalObservable(() => ({\n    title: \"\",\n    typing(e) {\n      this.title = e.target.value;\n    },\n    initTitle() {\n      this.title = \"\";\n    },\n  }));\n\n  const onKeyPress = e => {\n    if (e.key === eventkey.ENTER && todo.title.trim().length > 0) {\n      todoStore.addTodo(todo.title);\n      todo.initTitle();\n    }\n  };\n\n  return (\n    <>\n      <h1>TODOS</h1>\n      <input\n        id=\"new-todo-title\"\n        className=\"new-todo\"\n        placeholder=\"할일을 추가해주세요\"\n        value={todo.title}\n        onChange={todo.typing}\n        onKeyPress={onKeyPress}\n        autoFocus\n      />\n    </>\n  );\n});\n\nexport default TodoTypingView;\n","import { observer, useLocalObservable } from \"mobx-react-lite\";\nimport { useContext, useRef } from \"react\";\nimport { TodoListContext } from \"./TodoApp\";\nimport { eventkey } from \"../constants\";\n\nconst TodoItemView = observer(({ todo }) => {\n  const { todoStore } = useContext(TodoListContext);\n  const listEle = useRef(null);\n\n  const editedTodo = useLocalObservable(() => ({\n    title: \"\",\n    isEdited: false,\n    toggle() {\n      this.isEdited = !this.isEdited;\n      if (this.isEdited) {\n        listEle.current.className = \"editing\";\n      } else {\n        this.title = \"\";\n        listEle.current.className = todo.completed ? \"completed\" : \"\";\n      }\n    },\n    typing(e) {\n      this.title = e.target.value;\n    },\n  }));\n\n  const toggleCheckBox = () => {\n    todoStore.changeComplete(todo);\n    listEle.current.className = todo.completed ? \"completed\" : \"\";\n  };\n\n  const removeTodo = () => {\n    todoStore.removeTodo(todo);\n  };\n\n  const handleDoubleClick = () => {\n    editedTodo.toggle();\n  };\n\n  const handleKeyUp = e => {\n    // switch(e.key) {\n    //   case eventkey.ENTER:\n    //     ...\n    //     break;\n    //   case eventkey.ESC:\n    //   case eventkey.ESCAPE:\n    //     editedTodo.toggle();\n    // }\n\n    if (e.key === eventkey.ENTER && editedTodo.title.trim().length > 0) {\n      todoStore.changeTitle(todo, editedTodo);\n      editedTodo.toggle();\n    }\n\n    if (e.key === eventkey.ESC || e.key === eventkey.ESCAPE) {\n      editedTodo.toggle();\n    }\n  };\n\n  // const className = [s1? s1: '', s1? ...].join(' ');\n\n  return (\n    <>\n      <li ref={listEle} onDoubleClick={handleDoubleClick}>\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            onChange={toggleCheckBox}\n            checked={todo.completed}\n          />\n          <label className=\"label\">{todo.title}</label>\n          <button className=\"destroy\" onClick={removeTodo}></button>\n        </div>\n        <input\n          className=\"edit\"\n          value={editedTodo.title}\n          onChange={editedTodo.typing}\n          onKeyUp={handleKeyUp}\n        />\n      </li>\n    </>\n  );\n});\n\nexport default TodoItemView;\n","import TodoItemView from \"./TodoItemView\";\nimport { TodoListContext } from \"./TodoApp\";\nimport { useContext } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nconst TodoListView = observer(() => {\n  const { todoStore } = useContext(TodoListContext);\n\n  return (\n    <main>\n      <input className=\"toggle-all\" type=\"checkbox\" />\n      <ul id=\"todo-list\" className=\"todo-list\">\n        {todoStore.selectedTodos.map(todo => (\n          <TodoItemView todo={todo} key={todo.id} />\n        ))}\n      </ul>\n    </main>\n  );\n});\n\nexport default TodoListView;\n","import { observer } from \"mobx-react-lite\";\nimport { TodoListContext } from \"./TodoApp\";\nimport { useContext } from \"react\";\nimport { selectState } from \"../constants\";\n\nconst TodoFilterView = observer(() => {\n  const { todoStore } = useContext(TodoListContext);\n  const { ALL, ACTIVE, COMPLETED } = selectState;\n\n  const handleAllSelected = e => {\n    todoStore.changeSelected(ALL);\n  };\n\n  const handleActiveSelected = e => {\n    todoStore.changeSelected(ACTIVE);\n  };\n\n  const handleCompletedSelected = e => {\n    todoStore.changeSelected(COMPLETED);\n  };\n\n  return (\n    <div className=\"count-container\">\n      <span className=\"todo-count\">\n        총 <strong>{todoStore.selectedTodos.length}</strong> 개\n      </span>\n      <ul className=\"filters\">\n        <li>\n          <span\n            className={todoStore.selected === ALL ? `${ALL} selected` : ALL}\n            onClick={handleAllSelected}\n          >\n            전체보기\n          </span>\n        </li>\n        <li>\n          <span\n            className={\n              todoStore.selected === ACTIVE ? `${ACTIVE} selected` : ACTIVE\n            }\n            onClick={handleActiveSelected}\n          >\n            해야할 일\n          </span>\n        </li>\n        <li>\n          <span\n            className={\n              todoStore.selected === COMPLETED\n                ? `${COMPLETED} selected`\n                : COMPLETED\n            }\n            onClick={handleCompletedSelected}\n          >\n            완료한 일\n          </span>\n        </li>\n      </ul>\n    </div>\n  );\n});\n\nexport default TodoFilterView;\n","class LocalStore {\n  getItem(key) {\n    return JSON.parse(localStorage.getItem(key)) ?? [];\n  }\n\n  setItem(key, item) {\n    localStorage.setItem(key, JSON.stringify(item));\n  }\n}\n\nconst localStore = new LocalStore();\n\nexport default localStore;\n","import { action, computed, makeObservable, observable, autorun } from \"mobx\";\nimport { localStoreKey, selectState } from \"../constants\";\nimport localStore from \"./LocalStore\";\nconst { ALL, ACTIVE, COMPLETED } = selectState;\n\nclass TodoStore {\n  todos = localStore.getItem(localStoreKey);\n  selected = ALL;\n\n  constructor() {\n    makeObservable(this, {\n      todos: observable,\n      selected: observable,\n      addTodo: action,\n      removeTodo: action,\n      editTodo: action,\n      changeComplete: action,\n      changeTitle: action,\n      changeSelected: action,\n      selectedTodos: computed,\n    });\n  }\n\n  addTodo(title) {\n    this.todos.push({\n      id: Date.now(),\n      title: title,\n      completed: false,\n    });\n  }\n\n  removeTodo(todo) {\n    this.todos = this.todos.filter(_todo => _todo !== todo);\n  }\n\n  editTodo(todo) {\n    this.todos = this.todos.map(_todo => (_todo === todo ? todo : _todo));\n  }\n\n  changeComplete(todo) {\n    todo.completed = !todo.completed;\n    this.editTodo(todo);\n  }\n\n  changeTitle(todo, editedTodo) {\n    todo.title = editedTodo.title;\n    this.editTodo(todo);\n  }\n\n  changeSelected(selected) {\n    this.selected = selected;\n  }\n\n  get selectedTodos() {\n    return this.todos.filter(\n      todo =>\n        ({\n          [ALL]: true,\n          [ACTIVE]: !todo.completed,\n          [COMPLETED]: todo.completed,\n        }[this.selected])\n    );\n  }\n}\n\nconst todoStore = new TodoStore();\n\nautorun(() => {\n  localStore.setItem(localStoreKey, todoStore.todos);\n});\n\nexport default todoStore;\n","import todoStore from \"./TodoStore\";\n\nconst RootStore = () => {\n  return { todoStore };\n};\n\nexport default RootStore;\n","import TodoTypingView from \"./TodoTypingView\";\nimport TodoListView from \"./TodoListView\";\nimport TodoFilterView from \"./TodoFilterView\";\nimport RootStore from \"../stores/RootStore\";\nimport { createContext } from \"react\";\n\nexport const TodoListContext = createContext();\n\nconst TodoApp = () => {\n  return (\n    <TodoListContext.Provider value={RootStore()}>\n      <div className=\"todoapp\">\n        <TodoTypingView />\n        <TodoListView />\n        <TodoFilterView />\n      </div>\n    </TodoListContext.Provider>\n  );\n};\n\nexport default TodoApp;\n","import TodoApp from \"./components/TodoApp\";\n\nfunction App() {\n  return <TodoApp />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}